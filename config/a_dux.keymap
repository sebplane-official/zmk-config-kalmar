/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 19 18 17 16 15 25 26 27 28 29>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <4 3 2 1 0 10 11 12 13 14 20 21 22 23 24>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
    } 
    combos {
        compatible = "zmk,combos";

        bt_nxt {
            bindings = <&bt BT_NXT>;
            key-positions = <5 25>;
        };

        bt_prv {
            bindings = <&bt BT_PRV>;
            key-positions = <4 24>;
        };

        bt_clr {
            bindings = <&bt BT_CLR>;
            key-positions = <2 3 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // This is a sample keymap intended to be replaced with your own

        base_layer {
            bindings = <
&kp Q  &kp W           &kp E             &kp R          &kp T         &kp Y        &kp U        &kp I            &kp O            &kp P
&kp A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LCTRL F   &kp G         &kp H        &hmr RCTRL J  &hmr RIGHT_GUI K  &hmr RIGHT_ALT L  &kp SEMI
&kp Z  &kp X           &kp C             &kp V          &kp B         &kp N        &kp M        &kp COMMA        &kp DOT          &kp SLASH
                                         &mt LSHFT DEL  &lt 4 BSPC    &lt 4 SPACE  &lt 1 ENTER
            >;
        };

        lafayette {
            bindings = <
&kp CARET  &kp LT    &kp GT    &kp DLLR   &kp PRCNT                                 &kp AT       &kp AMPS  &kp STAR   &kp SQT    &kp GRAVE
&kp LBRC   &kp LPAR  &kp RPAR  &kp RBRC   &kp EQUAL                                 &kp BSLH     &kp PLUS  &kp MINUS  &kp FSLH   &kp DQT
&kp TILDE  &kp LBKT  &kp RBKT  &kp UNDER  &kp HASH                                  &kp PIPE     &kp EXCL  &kp SEMI   &kp COLON  &kp QMARK
                                          &mt LSHFT ESC  &lt 4 BSPC    &lt 4 SPACE  &lt 1 ENTER
            >;
        };

        num_row {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T                                     &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F  &kp G                                     &kp H        &kp J  &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V  &kp B                                     &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
                            &mt LSHFT DEL  &lt 4 BSPC    &lt 4 SPACE  &lt 2 ENTER
            >;
        };

        vim_nav {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T                                     &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F  &kp G                                     &kp H        &kp J  &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V  &kp B                                     &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
                            &mt LSHFT DEL  &lt 4 BSPC    &lt 4 SPACE  &lt 1 ENTER
            >;
        };

        num_nav {
            bindings = <
&kp TAB    &kp HOME        &kp UP_ARROW  &kp END      &kp PAGE_UP                               &kp MINUS    &kp N7  &kp N8  &kp N9  &none
&kp LC(A)  &kp LEFT        &kp DOWN      &kp RIGHT    &kp DOWN                                  &kp C        &kp N4  &kp N5  &kp N6  &kp N0
&kp LC(Z)  &kp LS(DELETE)  &kp LC(INS)   &kp LS(INS)  &kp LS(TAB)                               &kp DOT      &kp N1  &kp N2  &kp N3  &kp DOT
                                                      &mt LSHFT DEL  &lt 4 BSPC    &lt 4 SPACE  &lt 1 ENTER
            >;
        };
    };
};
